library(shiny)
library(bslib)
library(DT)
library(RSQLite)
library(ggplot2)
library(dplyr)
library(stringr)
library(plotly)
library(kableExtra)
library(shinydashboard)
library(flexdashboard)
# Data --------------------------------------------------------------------
# Connection a la base de donnees
database = dbConnect(RSQLite::SQLite(), dbname="COVID19VACCINS.sqlite")
# Intervallle de temps pour les graphiques
lims1 = as.POSIXct(strftime(c("2020-03-18","2021-10-14"), format="%Y-%m-%d"))
lims2 = as.POSIXct(strftime(c("2020-12-20","2021-10-14"), format="%Y-%m-%d"))
# Functions ---------------------------------------------------------------
########## Indicateur d’hospitalisation
indicHosp = function(dep){
# Recuperation des données
req = dbGetQuery(database,  statement=paste0("
SELECT Département, 100*sum(Hospitalisation)/(Population_dep*1000) as Pourcentage,
sum(Hospitalisation) as Hospitalisation
FROM COVID19, Départements
WHERE COVID19.Code_dep = Départements.Code_dep
AND Département= '", dep, "'
AND (Type_vaccin=1 OR Type_vaccin is null)
"))
# affiche un compteur
gauge(round(as.numeric(req$Pourcentage),3),
min=0, max=100, gaugeSectors(
succes=c(0, 9), warning=c(10, 14), danger=c(15, 100)))
}
########## Indicateur de décès
indicDed = function(dep){
# Recuperation des données
req = dbGetQuery(database, statement=paste0("
SELECT Département, ROUND(100*Décès/(Population_dep*1000),4) as Pourcentage
FROM COVID19, Départements
WHERE COVID19.Code_dep = Départements.Code_dep
AND Département= '", dep, "'
AND Date=(
SELECT Max(Date) as Date
FROM COVID19)
"))
# affiche une boite de valeur
# valueBox(req, icon = "ion-outlet", color="#FF6969")
return(req)
}
######### Indicateur de couverture vaccinale
indicCouv = function(dep){
# Recuperation des données
req = dbGetQuery(database, statement=paste0("
SELECT Département,
100*Round(Sum(Dose2)/(Population_dep*1000),4) as Pourcentage
FROM COVID19, Départements
WHERE COVID19.Code_dep = Départements.Code_dep
AND Département= '", dep, "'
"))
# affiche un compteur
gauge(round(as.numeric(req$Pourcentage),3),
min=0, max=100, gaugeSectors(
succes=c(75, 100), warning=c(70, 74), danger=c(0, 69)))
}
########## Courbe des hospitalisations
courbeHosp = function(dep){
# Recuperation des données
courbe = dbGetQuery(database, statement=paste0("
SELECT strftime('%Y-%m-%d', datetime(Date*3600*24, 'unixepoch')) as date,
Département, Hospitalisation as Hospitalisations_journalières
FROM COVID19, Départements
WHERE COVID19.Code_dep = Départements.Code_dep
AND Département= '", dep, "'
AND (Type_vaccin=1 OR Type_vaccin is null)
GROUP BY date
")) %>%
# Preparation des données
mutate(date=as.POSIXct(date, format="%Y-%m-%d")) %>%
# Courbe
ggplot(aes(x=date  ,y=Hospitalisations_journalières))+
geom_line(aes(color=Département))  +
labs(x="Date",y="Effectifs",
caption = "Source : COVID19VACCINS")+
scale_y_continuous(breaks=c(0, 100, 200, 300, 400, 500, 600, 700, 800))+
scale_x_datetime(limits=lims1, date_breaks = "2 month", date_labels = "%b\n%Y")+
theme_bw()+
theme(legend.position = "none")
# graphique ggplotly interactif
ggplotly(courbe, tooltip=c("x", "y", "fill")) %>%
layout(yaxis=list(fixedrange=TRUE), xaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar=FALSE)
}
########## Courbe des vaccinations completes
courbeVax = function(dep){
# Recuperation des données
courbe = dbGetQuery(database, statement=paste0("
SELECT strftime('%Y-%m-%d', datetime(Date*3600*24, 'unixepoch')) as date,
Département, Dose2 as vaccination_complète
FROM COVID19, Départements
WHERE COVID19.Code_dep = Départements.Code_dep
AND (Type_vaccin=1 OR Type_vaccin is null)
AND Département= '", dep, "'
GROUP BY date
")) %>%
# Preparation des données
mutate(date=as.POSIXct(date, format="%Y-%m-%d")) %>%
# Courbe
ggplot(aes(x=date  ,y=vaccination_complète))+
geom_line(aes(color=Département))  +
labs(x="Date",y="Effectifs",
caption = "Source : COVID19VACCINS")+
scale_y_continuous(breaks=c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000),
labels = c("0", "1.000", "2.000", "3.000", "4.000",
"5.000",  "6000", "7000", "8000", "9000"))+
scale_x_datetime(limits=lims2, date_breaks = "1 month", date_labels = "%b\n%Y")+
theme_bw()+
theme(legend.position="none")
# graphique ggplotly interactif
ggplotly(courbe, tooltip=c("x", "y", "fill")) %>%
layout(yaxis=list(fixedrange=TRUE), xaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar=FALSE)
}
# UI ----------------------------------------------------------------------
ui <- page_navbar(
title = "Tableau de bord : Covid-19",
bg = "#27800e",
underline = TRUE,
## Acceuil ----------------------------------------------------------
nav_panel(
title = "Acceuil",
card(
fluidRow(
column(width = 8, offset = 2,
markdown(
mds = c(
"<h1 style=\"text-align: center;\">Le COVID-19 en Normandie</h3>
<h2 style=\"text-align: center;\">Auteur: Hugo Maury</h3>
<hr>",
"Je suis un étudiant en Master mension Mathématiques appliqués, Statistiques,
parcours Data Science et Modélisation Statistique, à l'Université Bretagne Sud
à Vannes. Dans le cadre de mes études, et en collaboration avec l'Institut
National de la Santé et de la Recherche Médicale (INSERM) de Caen, j'ai
effectué un projet, qui porte sur le COVID-19 entre le 18 mars 2020 et le
13 octobre 2021. Le but étant de réalisé un tableau de bord, qui permettrait
de comprendre l'impact des trois confinements sur les hospitalisations et les
décès en région Normandie. Les données sont disponibles sur les liens, sur le
ruban à droite. J'ai réaliser un tableau de bord, en résentant pour chacun des
départements normands les informations suivantes :\n
* Indicateur d'hospitalisation
* Indicateur de décès
* Indicateur de couverture vaccinale
* Courbe des hospitalisations
* Courbe des vaccinations complètes
\n\n
Les graphiques que vous trouverez sont interactifs. Il suffit de passer votre
flèche sur la courbe à une date donnée pour faire apparaître une boîte contenant,
pour la date sélectionnée, une valeur.\n\n",
"**Indication:**\n
L'indicateur d'hospitalisation représente le nombre de personnes hospitalisées
par département divisé par sa population total. Cet indicateur comprend  aussi
les malades des hopitaux parisiens ainsi que toutes les personnes confinées dans
leur résidence secondaire en Normandie qui ont du se faire hospitaliser.
\n
Il est important de connaître la population pour chaque département de Normandie
pour se faire une meilleure image des résultats :"
)
),
tableOutput("tbl1"),
markdown(
mds = c(
"**Qu'est-ce que le COVID-19 ?**
\n
Le coronavirus 2019 est une maladie infectieuse émergente, appelée aussi
Covid-19, provoquée par le coronavirus SARS-CoV-2. Elle apparaît le 16 novembre 2019
à Wuhan, dans la province de Hubei (en Chine centrale), avant de se propager dans le
monde. Ce virus est à l'origine d'une pandémie, déclarée le 11 mars 2020 par l'Organisation
Mondiale de la Santé.",
"Pour freiner la formation de nouveaux foyers de contagion et préserver les
capacités d'accueil de ses hôpitaux, la France, comme de nombreux pays, décide
des mesures de confinement et l'annulation des manifestations sportives et culturelles.
Le 17 mars 2020, le premier confinement démarre en France.
\n"
)
)
)
),
fluidRow(
layout_columns(
col_widths = c(-1, 5, 5, -1),
card(card_header("Carte de la Normandie"),
card_body(markdown(mds = "<img src='normandie.png'/>")),
full_screen = T),
card(card_header("Drapeau Normand"),
card_body(markdown(mds = "<img src='drapeau.png'/>")),
full_screen = T)
)
)
)
),
## Seine Maritime -----------------------------------------------------
nav_panel(
title = "Seine Maritime",
card(
fluidRow(
column(width = 4,
card(max_height = 200,
card_header("Description"),
card_body(
markdown(
mds = "<p style='font-size:14px'>La Seine Maritime est composée de 1 243 788 habitants pour 6278km2.
Ses villes principales sont Rouen, Dieppe et Le Havre.</p>
\n
<p style='font-size:14px'>Le tourisme est réparti entre Rouen, la vallée de la Seine, les ports,
les stations balnéaires du littoral (Étretat, Fécamp, Dieppe,
Le Tréport, Saint-Valery-en-Caux).</p>"))
),
card(card_header("Carte de la Seine-Maritime"),
card_body(markdown(mds = "<img src='seine-maritime.jpg'/>")),
full_screen = T),
box(shinydashboard::valueBoxOutput("vbox1", width = NULL), width = "100%")
),
column(width = 4,
card(max_height = 180, card_header("Indicateur d’hospitalisation en %"), card_body(gaugeOutput("gauge1"))),
card(card_header("Courbe des hospitalisations journalières"), card_body(plotlyOutput("plotly1")))),
column(width = 4,
card(max_height = 180, card_header("Indicateur de couverture vaccinale en %"), card_body(gaugeOutput("gauge2"))),
card(card_header("Courbe des vaccinations complètes"), card_body(plotlyOutput("plotly2"))))
)
)
),
## Calvados --------------------------------------------------------------------
nav_panel(
title = "Calvados",
card(
fluidRow(
column(width = 4,
card(max_height = 200,
card_header("Description"),
card_body(
markdown(
mds = "<p style='font-size:14px'>Le Calvados est composé de 691 453 habitants pour 5 535 km2.
Ses villes principales sont Caen, Lisieux, Bayeux et Vire.</p>
\n
<p style='font-size:14px'>Le département comporte un village parmi Les Plus Beaux Villages
de France : Beuvron-en-Auge Le département est une terre touristique :
le Bessin, la Plaine de Caen, le Bocage Virois, la Côte de Nacre, la
Côte Fleurie, le Pays d'Auge et la Suisse normande.</p>"))
),
card(card_header("Carte du Calvados"),
card_body(markdown(mds = "<img src='calvados.jpg'/>")),
full_screen = T),
box(shinydashboard::valueBoxOutput("vbox2", width = NULL), width = "100%")
),
column(width = 4,
card(max_height = 180, card_header("Indicateur d’hospitalisation en %"), card_body(gaugeOutput("gauge3"))),
card(card_header("Courbe des hospitalisations journalières"), card_body(plotlyOutput("plotly3")))),
column(width = 4,
card(max_height = 180, card_header("Indicateur de couverture vaccinale en %"), card_body(gaugeOutput("gauge4"))),
card(card_header("Courbe des vaccinations complètes"), card_body(plotlyOutput("plotly4"))))
)
)
),
## Eure --------------------------------------------------------------------
nav_panel(
title = "Eure",
card(
fluidRow(
column(width = 4,
card(max_height = 200,
card_header("Description"),
card_body(
markdown(
mds = "<p style='font-size:14px'>L'Eure est composée de 600 687
habitants pour 6 040 km2. Ses villes principales sont Evreux,
Bernay et Les Andelys.</p>
\n
<p style='font-size:14px'>L'Eure tire son nom de l'Eure,
rivière qui le traverse avant de se jeter dans la Seine.
L'Eure bénéficie de paysages assez préservés de l'industrialisation
et de l'urbanisation, de grandes forêts, de campagnes
typiques avec de fraîches vallées et des villes
d'importance moyenne ou petite qui ont su préserver leur
charme et leur caractère.</p>")
)
),
card(card_header("Carte de l'Eure"),
card_body(markdown(mds = "<img src='eure.jpg'/>")),
full_screen = T),
box(shinydashboard::valueBoxOutput("vbox3", width = NULL), width = "100%")
),
column(width = 4,
card(max_height = 180, card_header("Indicateur d’hospitalisation en %"), card_body(gaugeOutput("gauge5"))),
card(card_header("Courbe des hospitalisations journalières"), card_body(plotlyOutput("plotly5")))),
column(width = 4,
card(max_height = 180, card_header("Indicateur de couverture vaccinale en %"), card_body(gaugeOutput("gauge6"))),
card(card_header("Courbe des vaccinations complètes"), card_body(plotlyOutput("plotly6"))))
)
)
),
## Manche ------------------------------------------------------------------
nav_panel(
title = "Manche",
card(
fluidRow(
column(width = 4,
card(max_height = 200,
card_header("Description"),
card_body(
markdown(
mds = "<p style='font-size:14px'>La Manche est composée de 490 669 habitants pour 5 938 km2.
Ses villes principales sont Saint-Lô, Avranches, Coutances et
Cherbourg-en-Cotentin.</p>
\n
<p style='font-size:14px'>Le nom du département de la Manche provient du nom de la mer qui
le borde sur tout son pourtour nord et ouest, et le quart est. Le
département comporte un village parmi les plus beaux villages de
France : Barfleur (3e position en 2012). Par ailleurs, Saint-Vaast-la-Hougue
remporte le titre de village préféré des Français en 2019.</p>"))
),
card(card_header("Carte du Calvados"),
card_body(markdown(mds = "<img src='manche.jpg'/>")),
full_screen = T),
box(shinydashboard::valueBoxOutput("vbox4", width = NULL), width = "100%")
),
column(width = 4,
card(max_height = 180, card_header("Indicateur d’hospitalisation en %"), card_body(gaugeOutput("gauge7"))),
card(card_header("Courbe des hospitalisations journalières"), card_body(plotlyOutput("plotly7")))),
column(width = 4,
card(max_height = 180, card_header("Indicateur de couverture vaccinale en %"), card_body(gaugeOutput("gauge8"))),
card(card_header("Courbe des vaccinations complètes"), card_body(plotlyOutput("plotly8"))))
)
)
),
## Orne --------------------------------------------------------------------
nav_panel(
title = "Orne",
card(
fluidRow(
column(width = 4,
card(max_height = 200,
card_header("Description"),
card_body(
markdown(
mds = "<p style='font-size:14px'>L'Orne est composé de 276 903 habitants pour 6 103 km2.
Ses villes principales sont Alençon, Argentan et Mortagne-au-Perche.</p>
\n
<p style='font-size:14px'>l'Orne est appelée depuis 1790 du nom du fleuve qui y prend sa
source et qui le traverse. Le département comporte un village
parmi les plus Beaux Villages de France : Saint-Céneri-le-Gérei.
L'Orne est restée très verte et peu polluée. Elle a su conserver
ses espaces naturels et forêts comme la forêt d'Andaine ou la
forêt d'Écouves.</p>"))
),
card(card_header("Carte de l'Orne"),
card_body(markdown(mds = "<img src='orne.jpg'/>")),
full_screen = T),
box(shinydashboard::valueBoxOutput("vbox5", width = NULL), width = "100%")
),
column(width = 4,
card(max_height = 180, card_header("Indicateur d’hospitalisation en %"), card_body(gaugeOutput("gauge9"))),
card(card_header("Courbe des hospitalisations journalières"), card_body(plotlyOutput("plotly9")))),
column(width = 4,
card(max_height = 180, card_header("Indicateur de couverture vaccinale en %"), card_body(gaugeOutput("gauge10"))),
card(card_header("Courbe des vaccinations complètes"), card_body(plotlyOutput("plotly10"))))
)
)
),
nav_spacer(),
# Links -------------------------------------------------------------------
nav_item(tags$a("Données indicateurs sanitaires", href = "https://www.data.gouv.fr/fr/datasets/synthese-des-indicateurs-de-suivi-de-lepidemie-covid-19/")),
nav_item(tags$a("Données vaccination", href = "https://www.data.gouv.fr/fr/datasets/donnees-relatives-aux-personnes-vaccinees-contre-la-covid-19-1/"))
)
# Server ------------------------------------------------------------------
server <- function(input, output) {
output$tbl1 = renderText({
dbGetQuery(database, statement="
SELECT Département,Population_dep as Population
FROM COVID19, Régions, Départements
WHERE COVID19.Code_reg = Régions.Code_reg
AND COVID19.Code_dep = Départements.Code_dep
AND Région='Normandie'
GROUP BY Département
ORDER BY Population DESC") %>%
kable (booktabs=TRUE, caption="") %>%
kable_styling(bootstrap_options=c('bordered'),
full_width=FALSE,
latex_options='HOLD_position')
})
# Valueboxes ----
output$vbox1 <- shinydashboard::renderValueBox({
shinydashboard::valueBox(
value = indicDed('Seine-Maritime'),
subtitle = "Indicateur de décès en %",
color = "red")
})
output$vbox2 <- shinydashboard::renderValueBox({
shinydashboard::valueBox(
value = indicDed('Calvados'),
subtitle = "Indicateur de décès en %",
color = "red")
})
output$vbox3 <- shinydashboard::renderValueBox({
shinydashboard::valueBox(
value = indicDed('Eure'),
subtitle = "Indicateur de décès en %",
color = "red")
})
output$vbox4 <- shinydashboard::renderValueBox({
shinydashboard::valueBox(
value = indicDed('Manche'),
subtitle = "Indicateur de décès en %",
color = "red")
})
output$vbox5 <- shinydashboard::renderValueBox({
shinydashboard::valueBox(
value = indicDed('Orne'),
subtitle = "Indicateur de décès en %",
color = "red")
})
# Gauge charts ----
output$gauge1 <- renderGauge({
indicHosp('Seine-Maritime')
})
output$gauge2 <- renderGauge({
indicCouv('Seine-Maritime')
})
output$gauge3 <- renderGauge({
indicHosp('Calvados')
})
output$gauge4 <- renderGauge({
indicCouv('Calvados')
})
output$gauge5 <- renderGauge({
indicHosp('Eure')
})
output$gauge6 <- renderGauge({
indicCouv('Eure')
})
output$gauge7 <- renderGauge({
indicHosp('Manche')
})
output$gauge8 <- renderGauge({
indicCouv('Manche')
})
output$gauge9 <- renderGauge({
indicHosp('Orne')
})
output$gauge10 <- renderGauge({
indicCouv('Orne')
})
# Line charts ----
output$plotly1 <- renderPlotly({
courbeHosp('Seine-Maritime')
})
output$plotly2 <- renderPlotly({
courbeVax('Seine-Maritime')
})
output$plotly3 <- renderPlotly({
courbeHosp('Calvados')
})
output$plotly4 <- renderPlotly({
courbeVax('Calvados')
})
output$plotly5 <- renderPlotly({
courbeHosp('Eure')
})
output$plotly6 <- renderPlotly({
courbeVax('Eure')
})
output$plotly7 <- renderPlotly({
courbeHosp('Manche')
})
output$plotly8 <- renderPlotly({
courbeVax('Manche')
})
output$plotly9 <- renderPlotly({
courbeHosp('Orne')
})
output$plotly10 <- renderPlotly({
courbeVax('Orne')
})
}
shinyApp(ui, server)
